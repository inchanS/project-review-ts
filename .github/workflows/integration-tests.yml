name: Integration Tests

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev

jobs:
  integration-test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: test_db
          MYSQL_USER: ${{ secrets.DB_USERNAME }}
          MYSQL_PASSWORD: ${{ secrets.DB_PASSWORD }}
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Verify MySQL connection
        run: |
          mysql --version
          sudo apt-get install -y mysql-client
          mysql --host ${{ secrets.DB_HOST }} --port 3306 -u ${{ secrets.DB_USERNAME }} -p${{ secrets.DB_PASSWORD }} -e "SHOW DATABASES;"
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Create ./env/.env.test file
        run: |
          mkdir -p ./env
          echo "TYPEORM_CONNECTION=mysql" > ./env/.env.test
          echo "TYPEORM_HOST=${{ secrets.DB_HOST }}" >> ./env/.env.test
          echo "TYPEORM_DATABASE=test_db" >> ./env/.env.test
          echo "TYPEORM_USERNAME=${{ secrets.DB_USERNAME }}" >> ./env/.env.test
          echo "TYPEORM_PASSWORD=${{ secrets.DB_PASSWORD }}" >> ./env/.env.test
          echo "TYPEORM_PORT=3306" >> ./env/.env.test
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> ./env/.env.test
      - name: Install dependencies
        run: npm install

      - name: Build the project
        run: npm run build

      - name: Run integration tests
        run: npm run test:integration-coverage

      # The following Steps has been modified based on the following Github-Action.
      # https://github.com/marketplace/actions/coverage-badge
      - name: Get Values
        if: github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        id: get-values
        shell: bash
        run: |
          COV=$(node -p 't=require(`./coverage/coverage-summary.json`).total,Math.min(...`lines|statements|functions|branches`.split(`|`).map(k=>t[k].pct))')
          echo "coverage=$COV" >> $GITHUB_OUTPUT

      - name: Checkout gh-pages
        if: github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        uses: actions/checkout@v3
        with:
          ref: gh-pages

      - name: Create Badges
        if: github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        shell: bash
        run: |
          npm i -g badgen-cli
          export COV=${{ steps.get-values.outputs.coverage }}
          COLOR=$(node -p '+process.env.COV >= 90 ? `green` : +process.env.COV >= 60 ? `orange` : `red`')
          mkdir -p badges
          badgen -j "Integration Coverage" -s $COV% -c $COLOR > badges/coverage.svg

      - name: Deploy Badges
        if: github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "Update badges [skip ci]"
          branch: gh-pages
          skip_fetch: true
          skip_checkout: true

      - name: Checkout Back
        if: github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}